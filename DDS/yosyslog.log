
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2018  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.8+612 (git sha1 c6d8692c, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Parsing `top.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: top.v
Parsing Verilog input from `top.v' to AST representation.
Generating RTLIL representation for module `\top'.
top.v:45: Warning: Identifier `\pulse_out' is implicitly declared.
top.v:50: Warning: Identifier `\wen_w' is implicitly declared.
Successfully finished Verilog frontend.

-- Parsing `sram16x16.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: sram16x16.v
Parsing Verilog input from `sram16x16.v' to AST representation.
Generating RTLIL representation for module `\sram16x16'.
Successfully finished Verilog frontend.

-- Parsing `Flash_to_SRAM.v' using frontend `verilog' --

3. Executing Verilog-2005 frontend: Flash_to_SRAM.v
Parsing Verilog input from `Flash_to_SRAM.v' to AST representation.
Generating RTLIL representation for module `\Flash_to_SRAM'.
Successfully finished Verilog frontend.

-- Parsing `spi_flash_reader.v' using frontend `verilog' --

4. Executing Verilog-2005 frontend: spi_flash_reader.v
Parsing Verilog input from `spi_flash_reader.v' to AST representation.
Generating RTLIL representation for module `\spi_flash_reader'.
Successfully finished Verilog frontend.

-- Parsing `sigma_delta.v' using frontend `verilog' --

5. Executing Verilog-2005 frontend: sigma_delta.v
Parsing Verilog input from `sigma_delta.v' to AST representation.
Generating RTLIL representation for module `\sigma_delta'.
Successfully finished Verilog frontend.

-- Parsing `dds.v' using frontend `verilog' --

6. Executing Verilog-2005 frontend: dds.v
Parsing Verilog input from `dds.v' to AST representation.
Generating RTLIL representation for module `\dds'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top top -json yosysout.json' --

7. Executing SYNTH_ICE40 pass.

7.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `$__ICE40_FULL_ADDER'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

7.2. Executing HIERARCHY pass (managing design hierarchy).

7.2.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \sram16x16
Used module:     \Flash_to_SRAM
Used module:         \spi_flash_reader
Used module:     \sigma_delta
Used module:     \dds

7.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \sram16x16
Used module:     \Flash_to_SRAM
Used module:         \spi_flash_reader
Used module:     \sigma_delta
Used module:     \dds
Removed 0 unused modules.
Mapping positional arguments of cell top.SRAM (sram16x16).
Mapping positional arguments of cell top.F2SRAM (Flash_to_SRAM).
Mapping positional arguments of cell top.DAC (sigma_delta).
Mapping positional arguments of cell top.dds_core (dds).

7.3. Executing PROC pass (convert processes to netlists).

7.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 4 dead cases from process $proc$dds.v:21$91 in module dds.
Marked 4 switch rules as full_case in process $proc$dds.v:21$91 in module dds.
Marked 1 switch rules as full_case in process $proc$spi_flash_reader.v:187$71 in module spi_flash_reader.
Marked 1 switch rules as full_case in process $proc$spi_flash_reader.v:174$67 in module spi_flash_reader.
Marked 1 switch rules as full_case in process $proc$spi_flash_reader.v:166$63 in module spi_flash_reader.
Marked 2 switch rules as full_case in process $proc$spi_flash_reader.v:155$58 in module spi_flash_reader.
Marked 2 switch rules as full_case in process $proc$spi_flash_reader.v:141$56 in module spi_flash_reader.
Removed 1 dead cases from process $proc$spi_flash_reader.v:112$53 in module spi_flash_reader.
Marked 5 switch rules as full_case in process $proc$spi_flash_reader.v:112$53 in module spi_flash_reader.
Marked 1 switch rules as full_case in process $proc$spi_flash_reader.v:104$51 in module spi_flash_reader.
Removed a total of 5 dead cases.

7.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 26 assignments to connections.

7.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\dds.$proc$dds.v:19$101'.
  Set init value: \islast = 1'0
Found init rule in `\dds.$proc$dds.v:19$100'.
  Set init value: \lastgo = 1'0
Found init rule in `\dds.$proc$dds.v:19$99'.
  Set init value: \iscos = 1'0
Found init rule in `\sigma_delta.$proc$sigma_delta.v:13$90'.
  Set init value: \acc = 17'00000000000000000
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:39$50'.
  Set init value: \spi_go = 1'0
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:37$48'.
  Set init value: \spi_addr = 24'000000000000000000000000
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:33$47'.
  Set init value: \second = 1'0
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:33$46'.
  Set init value: \laststart = 1'0
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:32$45'.
  Set init value: \poscount = 16'0000000000000000
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:21$44'.
  Set init value: \wdata = 16'0000000000000000
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:20$43'.
  Set init value: \addr = 16'0000000000000000
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:19$42'.
  Set init value: \wen = 1'0
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:10$41'.
  Set init value: \busy = 1'0
Found init rule in `\top.$proc$top.v:26$14'.
  Set init value: \loadlookup = 1'0
Found init rule in `\top.$proc$top.v:26$13'.
  Set init value: \rst = 1'0
Found init rule in `\top.$proc$top.v:25$12'.
  Set init value: \sweep = 18'000000000000000000
Found init rule in `\top.$proc$top.v:24$11'.
  Set init value: \count = 0

7.3.5. Executing PROC_ARST pass (detect async resets in processes).

7.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\dds.$proc$dds.v:19$101'.
Creating decoders for process `\dds.$proc$dds.v:19$100'.
Creating decoders for process `\dds.$proc$dds.v:19$99'.
Creating decoders for process `\dds.$proc$dds.v:21$91'.
     1/5: $0\islast[0:0]
     2/5: $0\iscos[0:0]
     3/5: $0\cos[15:0]
     4/5: $0\sin[15:0]
     5/5: $0\addr[15:0]
Creating decoders for process `\sigma_delta.$proc$sigma_delta.v:13$90'.
Creating decoders for process `\sigma_delta.$proc$sigma_delta.v:17$88'.
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:201$77'.
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:187$71'.
     1/1: $0\rdy_i[0:0]
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:174$67'.
     1/1: $0\cnt_len[17:0]
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:166$63'.
     1/1: $0\cnt_cmd[1:0]
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:155$58'.
     1/2: $0\cnt_bit_last[0:0]
     2/2: $0\cnt_bit[2:0]
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:141$56'.
     1/1: $0\shift_reg[31:0]
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:112$53'.
     1/5: $5\fsm_state_next[1:0]
     2/5: $4\fsm_state_next[1:0]
     3/5: $3\fsm_state_next[1:0]
     4/5: $2\fsm_state_next[1:0]
     5/5: $1\fsm_state_next[1:0]
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:104$51'.
     1/1: $0\fsm_state[1:0]
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:39$50'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:38$49'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:37$48'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:33$47'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:33$46'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:32$45'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:21$44'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:20$43'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:19$42'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:10$41'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:46$33'.
     1/9: $0\wen[0:0]
     2/9: $0\spi_go[0:0]
     3/9: $0\spi_addr[23:0]
     4/9: $0\f_byte[7:0]
     5/9: $0\second[0:0]
     6/9: $0\poscount[15:0]
     7/9: $0\wdata[15:0]
     8/9: $0\addr[15:0]
     9/9: $0\busy[0:0]
Creating decoders for process `\top.$proc$top.v:26$14'.
Creating decoders for process `\top.$proc$top.v:26$13'.
Creating decoders for process `\top.$proc$top.v:25$12'.
Creating decoders for process `\top.$proc$top.v:24$11'.
Creating decoders for process `\top.$proc$top.v:53$5'.
     1/1: $0\loadlookup[0:0]

7.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\spi_flash_reader.\fsm_state_next' from process `\spi_flash_reader.$proc$spi_flash_reader.v:112$53'.
No latch inferred for signal `\Flash_to_SRAM.\spi_len' from process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:38$49'.

7.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\dds.\addr' using process `\dds.$proc$dds.v:21$91'.
  created $dff cell `$procdff$259' with positive edge clock.
Creating register for signal `\dds.\sin' using process `\dds.$proc$dds.v:21$91'.
  created $dff cell `$procdff$260' with positive edge clock.
Creating register for signal `\dds.\cos' using process `\dds.$proc$dds.v:21$91'.
  created $dff cell `$procdff$261' with positive edge clock.
Creating register for signal `\dds.\iscos' using process `\dds.$proc$dds.v:21$91'.
  created $dff cell `$procdff$262' with positive edge clock.
Creating register for signal `\dds.\lastgo' using process `\dds.$proc$dds.v:21$91'.
  created $dff cell `$procdff$263' with positive edge clock.
Creating register for signal `\dds.\islast' using process `\dds.$proc$dds.v:21$91'.
  created $dff cell `$procdff$264' with positive edge clock.
Creating register for signal `\sigma_delta.\acc' using process `\sigma_delta.$proc$sigma_delta.v:17$88'.
  created $dff cell `$procdff$265' with positive edge clock.
Creating register for signal `\spi_flash_reader.\valid_i' using process `\spi_flash_reader.$proc$spi_flash_reader.v:201$77'.
  created $dff cell `$procdff$266' with positive edge clock.
Creating register for signal `\spi_flash_reader.\rdy_i' using process `\spi_flash_reader.$proc$spi_flash_reader.v:187$71'.
  created $dff cell `$procdff$267' with positive edge clock.
Creating register for signal `\spi_flash_reader.\cnt_len' using process `\spi_flash_reader.$proc$spi_flash_reader.v:174$67'.
  created $dff cell `$procdff$268' with positive edge clock.
Creating register for signal `\spi_flash_reader.\cnt_cmd' using process `\spi_flash_reader.$proc$spi_flash_reader.v:166$63'.
  created $dff cell `$procdff$269' with positive edge clock.
Creating register for signal `\spi_flash_reader.\cnt_bit' using process `\spi_flash_reader.$proc$spi_flash_reader.v:155$58'.
  created $dff cell `$procdff$270' with positive edge clock.
Creating register for signal `\spi_flash_reader.\cnt_bit_last' using process `\spi_flash_reader.$proc$spi_flash_reader.v:155$58'.
  created $dff cell `$procdff$271' with positive edge clock.
Creating register for signal `\spi_flash_reader.\shift_reg' using process `\spi_flash_reader.$proc$spi_flash_reader.v:141$56'.
  created $dff cell `$procdff$272' with positive edge clock.
Creating register for signal `\spi_flash_reader.\fsm_state' using process `\spi_flash_reader.$proc$spi_flash_reader.v:104$51'.
  created $dff cell `$procdff$273' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\wen' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:46$33'.
  created $dff cell `$procdff$274' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\busy' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:46$33'.
  created $dff cell `$procdff$275' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\addr' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:46$33'.
  created $dff cell `$procdff$276' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\wdata' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:46$33'.
  created $dff cell `$procdff$277' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\poscount' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:46$33'.
  created $dff cell `$procdff$278' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\laststart' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:46$33'.
  created $dff cell `$procdff$279' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\second' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:46$33'.
  created $dff cell `$procdff$280' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\f_byte' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:46$33'.
  created $dff cell `$procdff$281' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\spi_addr' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:46$33'.
  created $dff cell `$procdff$282' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\spi_go' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:46$33'.
  created $dff cell `$procdff$283' with positive edge clock.
Creating register for signal `\top.\count' using process `\top.$proc$top.v:53$5'.
  created $dff cell `$procdff$284' with positive edge clock.
Creating register for signal `\top.\sweep' using process `\top.$proc$top.v:53$5'.
  created $dff cell `$procdff$285' with positive edge clock.
Creating register for signal `\top.\rst' using process `\top.$proc$top.v:53$5'.
  created $dff cell `$procdff$286' with positive edge clock.
Creating register for signal `\top.\loadlookup' using process `\top.$proc$top.v:53$5'.
  created $dff cell `$procdff$287' with positive edge clock.

7.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `dds.$proc$dds.v:19$101'.
Removing empty process `dds.$proc$dds.v:19$100'.
Removing empty process `dds.$proc$dds.v:19$99'.
Found and cleaned up 7 empty switches in `\dds.$proc$dds.v:21$91'.
Removing empty process `dds.$proc$dds.v:21$91'.
Removing empty process `sigma_delta.$proc$sigma_delta.v:13$90'.
Removing empty process `sigma_delta.$proc$sigma_delta.v:17$88'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:201$77'.
Found and cleaned up 1 empty switch in `\spi_flash_reader.$proc$spi_flash_reader.v:187$71'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:187$71'.
Found and cleaned up 2 empty switches in `\spi_flash_reader.$proc$spi_flash_reader.v:174$67'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:174$67'.
Found and cleaned up 2 empty switches in `\spi_flash_reader.$proc$spi_flash_reader.v:166$63'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:166$63'.
Found and cleaned up 3 empty switches in `\spi_flash_reader.$proc$spi_flash_reader.v:155$58'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:155$58'.
Found and cleaned up 2 empty switches in `\spi_flash_reader.$proc$spi_flash_reader.v:141$56'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:141$56'.
Found and cleaned up 5 empty switches in `\spi_flash_reader.$proc$spi_flash_reader.v:112$53'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:112$53'.
Found and cleaned up 1 empty switch in `\spi_flash_reader.$proc$spi_flash_reader.v:104$51'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:104$51'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:39$50'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:38$49'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:37$48'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:33$47'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:33$46'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:32$45'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:21$44'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:20$43'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:19$42'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:10$41'.
Found and cleaned up 5 empty switches in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:46$33'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:46$33'.
Removing empty process `top.$proc$top.v:26$14'.
Removing empty process `top.$proc$top.v:26$13'.
Removing empty process `top.$proc$top.v:25$12'.
Removing empty process `top.$proc$top.v:24$11'.
Found and cleaned up 1 empty switch in `\top.$proc$top.v:53$5'.
Removing empty process `top.$proc$top.v:53$5'.
Cleaned up 29 empty switches.

7.4. Executing FLATTEN pass (flatten design).
Using template Flash_to_SRAM for cells of type Flash_to_SRAM.
Using template sram16x16 for cells of type sram16x16.
Using template dds for cells of type dds.
Using template sigma_delta for cells of type sigma_delta.
Using template spi_flash_reader for cells of type spi_flash_reader.
<suppressed ~5 debug messages>
No more expansions possible.
Deleting now unused module dds.
Deleting now unused module sigma_delta.
Deleting now unused module spi_flash_reader.
Deleting now unused module Flash_to_SRAM.
Deleting now unused module sram16x16.

7.5. Executing TRIBUF pass.

7.6. Executing DEMINOUT pass (demote inout ports to input or output).

7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~18 debug messages>

7.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 15 unused cells and 138 unused wires.
<suppressed ~22 debug messages>

7.9. Executing CHECK pass (checking for obvious problems).
checking module top..
Warning: Wire top.\HB [2] is used but has no driver.
Warning: Wire top.\HB [1] is used but has no driver.
Warning: Wire top.\HB [0] is used but has no driver.
found and reported 3 problems.

7.10. Executing OPT pass (performing simple optimizations).

7.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

7.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~66 debug messages>
Removed a total of 22 cells.

7.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $techmap\dds_core.$procmux$110: \dds_core.islast -> 1'0
      Replacing known input bits on port A of cell $techmap\dds_core.$procmux$114: \dds_core.iscos -> 1'0
  Analyzing evaluation results.
    dead port 2/2 on $mux $techmap\F2SRAM.SPI_READER.$procmux$178.
    dead port 2/2 on $mux $techmap\F2SRAM.SPI_READER.$procmux$184.
    dead port 2/2 on $mux $techmap\F2SRAM.SPI_READER.$procmux$191.
    dead port 2/2 on $mux $techmap\F2SRAM.SPI_READER.$procmux$199.
Removed 4 multiplexer ports.
<suppressed ~26 debug messages>

7.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New input vector for $reduce_and cell $techmap\F2SRAM.$reduce_and$Flash_to_SRAM.v:63$38: { \F2SRAM.poscount [0] \F2SRAM.poscount [1] \F2SRAM.poscount [2] \F2SRAM.poscount [3] \F2SRAM.poscount [4] \F2SRAM.poscount [5] \F2SRAM.poscount [6] \F2SRAM.poscount [7] \F2SRAM.poscount [8] \F2SRAM.poscount [9] \F2SRAM.poscount [10] \F2SRAM.poscount [11] \F2SRAM.poscount [12] \F2SRAM.poscount [13] \F2SRAM.poscount [14] \F2SRAM.poscount [15] }
    New ctrl vector for $pmux cell $techmap\dds_core.$procmux$118: { $auto$opt_reduce.cc:132:opt_mux$291 $auto$opt_reduce.cc:132:opt_mux$289 }
  Optimizing cells in module \top.
Performed a total of 2 changes.

7.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

7.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

7.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 26 unused wires.
<suppressed ~1 debug messages>

7.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

7.10.9. Rerunning OPT passes. (Maybe there is more to do..)

7.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

7.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

7.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

7.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

7.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

7.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

7.10.16. Finished OPT passes. (There is nothing left to do.)

7.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell top.$add$top.v:56$8 ($add).
Removed top 31 bits (of 32) from port B of cell top.$techmap\F2SRAM.$add$Flash_to_SRAM.v:73$40 ($add).
Removed top 16 bits (of 32) from port Y of cell top.$techmap\F2SRAM.$add$Flash_to_SRAM.v:73$40 ($add).
Removed top 31 bits (of 32) from port B of cell top.$techmap\F2SRAM.$add$Flash_to_SRAM.v:71$39 ($add).
Removed top 16 bits (of 32) from port Y of cell top.$techmap\F2SRAM.$add$Flash_to_SRAM.v:71$39 ($add).
Removed top 1 bits (of 2) from port B of cell top.$techmap\dds_core.$procmux$121_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell top.$techmap\F2SRAM.SPI_READER.$eq$spi_flash_reader.v:169$64 ($eq).
Removed top 31 bits (of 32) from port B of cell top.$techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:162$61 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:162$61 ($add).
Removed top 16 bits (of 32) from wire top.$techmap\F2SRAM.$add$Flash_to_SRAM.v:71$39_Y.
Removed top 16 bits (of 32) from wire top.$techmap\F2SRAM.$add$Flash_to_SRAM.v:73$40_Y.
Removed top 29 bits (of 32) from wire top.$techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:162$61_Y.

7.12. Executing PEEPOPT pass (run peephole optimizers).

7.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

7.14. Executing SHARE pass (SAT-based resource sharing).

7.15. Executing TECHMAP pass (map to technology primitives).

7.15.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

7.15.2. Continuing TECHMAP pass.
Using template $paramod$6816abac91a51b405c3de5bceb2855c03dd44485\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$99e5b0ecd4c7f9fb6cd3a733593eba894c42613f\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$0760830c1e6c196382cd2cb153e9fff2d84c061d\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$5b7c8f37cb386acdf3ce7e528c09e6d15eb51b72\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~84 debug messages>

7.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

7.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

7.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $add$top.v:56$8 ($add).
  creating $macc model for $add$top.v:57$9 ($add).
  creating $macc model for $techmap\DAC.$add$sigma_delta.v:18$89 ($add).
  creating $macc model for $techmap\F2SRAM.$add$Flash_to_SRAM.v:71$39 ($add).
  creating $macc model for $techmap\F2SRAM.$add$Flash_to_SRAM.v:73$40 ($add).
  creating $macc model for $techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:162$61 ($add).
  creating $macc model for $techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:170$65 ($add).
  creating $macc model for $techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$70 ($sub).
  creating $alu model for $macc $techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$70.
  creating $alu model for $macc $techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:170$65.
  creating $alu model for $macc $techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:162$61.
  creating $alu model for $macc $techmap\F2SRAM.$add$Flash_to_SRAM.v:73$40.
  creating $alu model for $macc $techmap\F2SRAM.$add$Flash_to_SRAM.v:71$39.
  creating $alu model for $macc $techmap\DAC.$add$sigma_delta.v:18$89.
  creating $alu model for $macc $add$top.v:57$9.
  creating $alu model for $macc $add$top.v:56$8.
  creating $alu cell for $add$top.v:56$8: $auto$alumacc.cc:474:replace_alu$307
  creating $alu cell for $add$top.v:57$9: $auto$alumacc.cc:474:replace_alu$310
  creating $alu cell for $techmap\DAC.$add$sigma_delta.v:18$89: $auto$alumacc.cc:474:replace_alu$313
  creating $alu cell for $techmap\F2SRAM.$add$Flash_to_SRAM.v:71$39: $auto$alumacc.cc:474:replace_alu$316
  creating $alu cell for $techmap\F2SRAM.$add$Flash_to_SRAM.v:73$40: $auto$alumacc.cc:474:replace_alu$319
  creating $alu cell for $techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:162$61: $auto$alumacc.cc:474:replace_alu$322
  creating $alu cell for $techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:170$65: $auto$alumacc.cc:474:replace_alu$325
  creating $alu cell for $techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$70: $auto$alumacc.cc:474:replace_alu$328
  created 8 $alu and 0 $macc cells.

7.19. Executing OPT pass (performing simple optimizations).

7.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

7.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

7.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

7.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

7.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

7.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

7.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

7.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

7.19.9. Finished OPT passes. (There is nothing left to do.)

7.20. Executing FSM pass (extract and optimize FSM).

7.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.F2SRAM.SPI_READER.fsm_state as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking top.F2SRAM.spi_addr as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

7.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

7.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

7.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

7.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

7.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

7.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

7.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

7.21. Executing OPT pass (performing simple optimizations).

7.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

7.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

7.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

7.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

7.21.5. Finished fast OPT passes.

7.22. Executing MEMORY pass.

7.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

7.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

7.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

7.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

7.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).

7.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

7.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

7.25. Executing TECHMAP pass (map to technology primitives).

7.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

7.25.2. Continuing TECHMAP pass.
No more expansions possible.

7.26. Executing ICE40_BRAMINIT pass.

7.27. Executing OPT pass (performing simple optimizations).

7.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~10 debug messages>

7.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

7.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

7.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 4 unused cells and 8 unused wires.
<suppressed ~5 debug messages>

7.27.5. Finished fast OPT passes.

7.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

7.29. Executing OPT pass (performing simple optimizations).

7.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

7.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

7.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

7.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

7.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

7.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

7.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

7.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

7.29.9. Finished OPT passes. (There is nothing left to do.)

7.30. Executing TECHMAP pass (map to technology primitives).

7.30.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

7.30.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

7.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=18\Y_WIDTH=18 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=17 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=18\B_WIDTH=1\Y_WIDTH=18 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=2 for cells of type $lcu.
No more expansions possible.
<suppressed ~391 debug messages>

7.31. Executing ICE40_OPT pass (performing simple optimizations).

7.31.1. Running ICE40 specific optimizations.

7.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~236 debug messages>

7.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~60 debug messages>
Removed a total of 20 cells.

7.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

7.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 153 unused cells and 173 unused wires.
<suppressed ~154 debug messages>

7.31.6. Rerunning OPT passes. (Removed registers in this run.)

7.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell top.$auto$alumacc.cc:474:replace_alu$307.slice[0].carry: CO=\count [0]
Optimized away SB_CARRY cell top.$auto$alumacc.cc:474:replace_alu$316.slice[0].carry: CO=\F2SRAM.addr [0]
Optimized away SB_CARRY cell top.$auto$alumacc.cc:474:replace_alu$319.slice[0].carry: CO=\F2SRAM.poscount [0]
Optimized away SB_CARRY cell top.$auto$alumacc.cc:474:replace_alu$322.slice[0].carry: CO=\F2SRAM.SPI_READER.cnt_bit [0]
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[1].adder back to logic.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$316.slice[1].adder back to logic.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$319.slice[1].adder back to logic.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$322.slice[1].adder back to logic.

7.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~58 debug messages>

7.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

7.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

7.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

7.31.12. Rerunning OPT passes. (Removed registers in this run.)

7.31.13. Running ICE40 specific optimizations.

7.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

7.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

7.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

7.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

7.31.18. Finished OPT passes. (There is nothing left to do.)

7.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

7.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module top:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1057 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_bit_last[0:0] -> \F2SRAM.SPI_READER.cnt_bit_last.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1058 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\fsm_state[1:0] [0] -> \F2SRAM.SPI_READER.fsm_state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1059 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\fsm_state[1:0] [1] -> \F2SRAM.SPI_READER.fsm_state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1092 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_bit[2:0] [0] -> \F2SRAM.SPI_READER.cnt_bit [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1093 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_bit[2:0] [1] -> \F2SRAM.SPI_READER.cnt_bit [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1094 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_bit[2:0] [2] -> \F2SRAM.SPI_READER.cnt_bit [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1095 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_cmd[1:0] [0] -> \F2SRAM.SPI_READER.cnt_cmd [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1096 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_cmd[1:0] [1] -> \F2SRAM.SPI_READER.cnt_cmd [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1097 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [0] -> \F2SRAM.SPI_READER.cnt_len [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1098 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [1] -> \F2SRAM.SPI_READER.cnt_len [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1099 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [2] -> \F2SRAM.SPI_READER.cnt_len [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1100 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [3] -> \F2SRAM.SPI_READER.cnt_len [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1101 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [4] -> \F2SRAM.SPI_READER.cnt_len [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1102 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [5] -> \F2SRAM.SPI_READER.cnt_len [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1103 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [6] -> \F2SRAM.SPI_READER.cnt_len [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1104 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [7] -> \F2SRAM.SPI_READER.cnt_len [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1105 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [8] -> \F2SRAM.SPI_READER.cnt_len [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1106 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [9] -> \F2SRAM.SPI_READER.cnt_len [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1107 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [10] -> \F2SRAM.SPI_READER.cnt_len [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1108 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [11] -> \F2SRAM.SPI_READER.cnt_len [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1109 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [12] -> \F2SRAM.SPI_READER.cnt_len [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1110 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [13] -> \F2SRAM.SPI_READER.cnt_len [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1111 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [14] -> \F2SRAM.SPI_READER.cnt_len [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1112 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [15] -> \F2SRAM.SPI_READER.cnt_len [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1113 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [16] -> \F2SRAM.SPI_READER.cnt_len [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1114 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [17] -> \F2SRAM.SPI_READER.cnt_len [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$413 to $_DFFE_PP_ for $0\count[31:0] [1] -> \count [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$463 to $_DFFE_PP_ for $0\loadlookup[0:0] -> \loadlookup.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$465 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [0] -> \F2SRAM.spi_addr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$466 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [1] -> \F2SRAM.spi_addr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$467 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [2] -> \F2SRAM.spi_addr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$468 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [3] -> \F2SRAM.spi_addr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$469 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [4] -> \F2SRAM.spi_addr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$470 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [5] -> \F2SRAM.spi_addr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$471 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [6] -> \F2SRAM.spi_addr [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$472 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [7] -> \F2SRAM.spi_addr [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$473 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [8] -> \F2SRAM.spi_addr [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$474 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [9] -> \F2SRAM.spi_addr [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$475 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [10] -> \F2SRAM.spi_addr [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$476 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [11] -> \F2SRAM.spi_addr [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$477 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [12] -> \F2SRAM.spi_addr [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$478 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [13] -> \F2SRAM.spi_addr [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$479 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [14] -> \F2SRAM.spi_addr [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$480 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [15] -> \F2SRAM.spi_addr [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$481 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [16] -> \F2SRAM.spi_addr [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$482 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [17] -> \F2SRAM.spi_addr [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$483 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [18] -> \F2SRAM.spi_addr [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$484 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [19] -> \F2SRAM.spi_addr [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$485 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [20] -> \F2SRAM.spi_addr [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$486 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [21] -> \F2SRAM.spi_addr [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$487 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [22] -> \F2SRAM.spi_addr [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$488 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [23] -> \F2SRAM.spi_addr [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$489 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [0] -> \F2SRAM.f_byte [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$490 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [1] -> \F2SRAM.f_byte [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$491 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [2] -> \F2SRAM.f_byte [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$492 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [3] -> \F2SRAM.f_byte [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$493 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [4] -> \F2SRAM.f_byte [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$494 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [5] -> \F2SRAM.f_byte [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$495 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [6] -> \F2SRAM.f_byte [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$496 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [7] -> \F2SRAM.f_byte [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$497 to $_DFFE_PP_ for $techmap\F2SRAM.$0\second[0:0] -> \F2SRAM.second.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$499 to $_DFFE_PP_ for $techmap\F2SRAM.$0\poscount[15:0] [1] -> \F2SRAM.poscount [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$514 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [0] -> \F2SRAM.wdata [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$515 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [1] -> \F2SRAM.wdata [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$516 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [2] -> \F2SRAM.wdata [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$517 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [3] -> \F2SRAM.wdata [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$518 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [4] -> \F2SRAM.wdata [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$519 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [5] -> \F2SRAM.wdata [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$520 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [6] -> \F2SRAM.wdata [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$521 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [7] -> \F2SRAM.wdata [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$522 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [8] -> \F2SRAM.wdata [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$523 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [9] -> \F2SRAM.wdata [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$524 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [10] -> \F2SRAM.wdata [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$525 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [11] -> \F2SRAM.wdata [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$526 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [12] -> \F2SRAM.wdata [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$527 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [13] -> \F2SRAM.wdata [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$528 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [14] -> \F2SRAM.wdata [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$529 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [15] -> \F2SRAM.wdata [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$531 to $_DFFE_PP_ for $techmap\F2SRAM.$0\addr[15:0] [1] -> \F2SRAM.addr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$863 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [0] -> \dds_core.cos [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$864 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [1] -> \dds_core.cos [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$865 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [2] -> \dds_core.cos [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$866 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [3] -> \dds_core.cos [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$867 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [4] -> \dds_core.cos [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$868 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [5] -> \dds_core.cos [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$869 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [6] -> \dds_core.cos [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$870 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [7] -> \dds_core.cos [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$871 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [8] -> \dds_core.cos [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$872 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [9] -> \dds_core.cos [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$873 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [10] -> \dds_core.cos [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$874 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [11] -> \dds_core.cos [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$875 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [12] -> \dds_core.cos [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$876 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [13] -> \dds_core.cos [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$877 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [14] -> \dds_core.cos [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$878 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [15] -> \dds_core.cos [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$879 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [0] -> \dds_core.addr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$880 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [1] -> \dds_core.addr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$881 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [2] -> \dds_core.addr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$882 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [3] -> \dds_core.addr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$883 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [4] -> \dds_core.addr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$884 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [5] -> \dds_core.addr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$885 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [6] -> \dds_core.addr [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$886 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [7] -> \dds_core.addr [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$887 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [8] -> \dds_core.addr [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$888 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [9] -> \dds_core.addr [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$889 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [10] -> \dds_core.addr [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$890 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [11] -> \dds_core.addr [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$891 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [12] -> \dds_core.addr [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$892 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [13] -> \dds_core.addr [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$893 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [14] -> \dds_core.addr [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$894 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [15] -> \dds_core.addr [15].

7.34. Executing TECHMAP pass (map to technology primitives).

7.34.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

7.34.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~243 debug messages>

7.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~351 debug messages>

7.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

7.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in top.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1036 (SB_DFF): \DAC.acc [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1037 (SB_DFF): \DAC.acc [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1038 (SB_DFF): \DAC.acc [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1039 (SB_DFF): \DAC.acc [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1040 (SB_DFF): \DAC.acc [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1041 (SB_DFF): \DAC.acc [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1042 (SB_DFF): \DAC.acc [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1043 (SB_DFF): \DAC.acc [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1044 (SB_DFF): \DAC.acc [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1045 (SB_DFF): \DAC.acc [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1046 (SB_DFF): \DAC.acc [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1047 (SB_DFF): \DAC.acc [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1048 (SB_DFF): \DAC.acc [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1049 (SB_DFF): \DAC.acc [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1050 (SB_DFF): \DAC.acc [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1051 (SB_DFF): \DAC.acc [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1035 (SB_DFF): \DAC.acc [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$463 (SB_DFFE): \loadlookup = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$432 (SB_DFF): \count [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$455 (SB_DFF): \sweep [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$450 (SB_DFF): \sweep [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$452 (SB_DFF): \sweep [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$451 (SB_DFF): \sweep [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$416 (SB_DFF): \count [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$446 (SB_DFF): \sweep [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$410 (SB_DFF): \F2SRAM.laststart = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$422 (SB_DFF): \count [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$423 (SB_DFF): \count [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$424 (SB_DFF): \count [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$425 (SB_DFF): \count [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$426 (SB_DFF): \count [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$427 (SB_DFF): \count [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$428 (SB_DFF): \count [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$429 (SB_DFF): \count [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$430 (SB_DFF): \count [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$412 (SB_DFF): \count [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$434 (SB_DFF): \count [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$433 (SB_DFF): \count [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$431 (SB_DFF): \count [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$436 (SB_DFF): \count [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$438 (SB_DFF): \count [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$437 (SB_DFF): \count [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$435 (SB_DFF): \count [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$445 (SB_DFF): \sweep [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$421 (SB_DFF): \count [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$447 (SB_DFF): \sweep [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$449 (SB_DFF): \sweep [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$448 (SB_DFF): \sweep [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$418 (SB_DFF): \count [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$417 (SB_DFF): \count [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$453 (SB_DFF): \sweep [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$415 (SB_DFF): \count [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$414 (SB_DFF): \count [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$413 (SB_DFFE): \count [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$480 (SB_DFFE): \F2SRAM.spi_addr [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$478 (SB_DFFE): \F2SRAM.spi_addr [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$457 (SB_DFF): \sweep [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$458 (SB_DFF): \sweep [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$459 (SB_DFF): \sweep [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$461 (SB_DFF): \sweep [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$468 (SB_DFFE): \F2SRAM.spi_addr [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$466 (SB_DFFE): \F2SRAM.spi_addr [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$444 (SB_DFF): \sweep [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$419 (SB_DFF): \count [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$462 (SB_DFF): \rst = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$464 (SB_DFF): \F2SRAM.spi_go = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$467 (SB_DFFE): \F2SRAM.spi_addr [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$460 (SB_DFF): \sweep [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$420 (SB_DFF): \count [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$470 (SB_DFFE): \F2SRAM.spi_addr [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$471 (SB_DFFE): \F2SRAM.spi_addr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$472 (SB_DFFE): \F2SRAM.spi_addr [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$473 (SB_DFFE): \F2SRAM.spi_addr [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$474 (SB_DFFE): \F2SRAM.spi_addr [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$475 (SB_DFFE): \F2SRAM.spi_addr [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$476 (SB_DFFE): \F2SRAM.spi_addr [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$477 (SB_DFFE): \F2SRAM.spi_addr [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$456 (SB_DFF): \sweep [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$479 (SB_DFFE): \F2SRAM.spi_addr [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$454 (SB_DFF): \sweep [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$481 (SB_DFFE): \F2SRAM.spi_addr [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$482 (SB_DFFE): \F2SRAM.spi_addr [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$483 (SB_DFFE): \F2SRAM.spi_addr [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$484 (SB_DFFE): \F2SRAM.spi_addr [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$485 (SB_DFFE): \F2SRAM.spi_addr [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$486 (SB_DFFE): \F2SRAM.spi_addr [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$487 (SB_DFFE): \F2SRAM.spi_addr [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$488 (SB_DFFE): \F2SRAM.spi_addr [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$465 (SB_DFFE): \F2SRAM.spi_addr [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$500 (SB_DFF): \F2SRAM.poscount [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$499 (SB_DFFE): \F2SRAM.poscount [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$497 (SB_DFFE): \F2SRAM.second = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$501 (SB_DFF): \F2SRAM.poscount [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$502 (SB_DFF): \F2SRAM.poscount [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$503 (SB_DFF): \F2SRAM.poscount [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$504 (SB_DFF): \F2SRAM.poscount [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$505 (SB_DFF): \F2SRAM.poscount [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$506 (SB_DFF): \F2SRAM.poscount [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$507 (SB_DFF): \F2SRAM.poscount [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$508 (SB_DFF): \F2SRAM.poscount [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$509 (SB_DFF): \F2SRAM.poscount [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$510 (SB_DFF): \F2SRAM.poscount [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$511 (SB_DFF): \F2SRAM.poscount [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$512 (SB_DFF): \F2SRAM.poscount [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$513 (SB_DFF): \F2SRAM.poscount [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$515 (SB_DFFE): \F2SRAM.wdata [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$498 (SB_DFF): \F2SRAM.poscount [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$516 (SB_DFFE): \F2SRAM.wdata [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$517 (SB_DFFE): \F2SRAM.wdata [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$518 (SB_DFFE): \F2SRAM.wdata [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$519 (SB_DFFE): \F2SRAM.wdata [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$520 (SB_DFFE): \F2SRAM.wdata [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$521 (SB_DFFE): \F2SRAM.wdata [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$522 (SB_DFFE): \F2SRAM.wdata [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$523 (SB_DFFE): \F2SRAM.wdata [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$524 (SB_DFFE): \F2SRAM.wdata [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$525 (SB_DFFE): \F2SRAM.wdata [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$526 (SB_DFFE): \F2SRAM.wdata [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$527 (SB_DFFE): \F2SRAM.wdata [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$528 (SB_DFFE): \F2SRAM.wdata [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$529 (SB_DFFE): \F2SRAM.wdata [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$531 (SB_DFFE): \F2SRAM.addr [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$514 (SB_DFFE): \F2SRAM.wdata [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$532 (SB_DFF): \F2SRAM.addr [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$533 (SB_DFF): \F2SRAM.addr [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$534 (SB_DFF): \F2SRAM.addr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$535 (SB_DFF): \F2SRAM.addr [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$536 (SB_DFF): \F2SRAM.addr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$537 (SB_DFF): \F2SRAM.addr [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$540 (SB_DFF): \F2SRAM.addr [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$539 (SB_DFF): \F2SRAM.addr [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$542 (SB_DFF): \F2SRAM.addr [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$541 (SB_DFF): \F2SRAM.addr [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$538 (SB_DFF): \F2SRAM.addr [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$543 (SB_DFF): \F2SRAM.addr [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$544 (SB_DFF): \F2SRAM.addr [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$545 (SB_DFF): \F2SRAM.addr [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$469 (SB_DFFE): \F2SRAM.spi_addr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$530 (SB_DFF): \F2SRAM.addr [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$546 (SB_DFF): \F2SRAM.busy = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$547 (SB_DFF): \F2SRAM.wen = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$801 (SB_DFF): \dds_core.iscos = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$861 (SB_DFF): \dds_core.islast = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$862 (SB_DFF): \dds_core.lastgo = 0

7.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in top.
  Merging $auto$simplemap.cc:277:simplemap_mux$1250 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$70_Y [17], B=1'0, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1114 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1155 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [2], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1062 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1227 (A=$auto$simplemap.cc:309:simplemap_lut$1126, B=1'0, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1057 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1116 (A=1'0, B=\F2SRAM.SPI_READER.fsm_state_next [0], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1058 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1117 (A=1'0, B=\F2SRAM.SPI_READER.fsm_state_next [1], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1059 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1154 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [1], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1061 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1156 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [3], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1063 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1157 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [4], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1064 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1158 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [5], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1065 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1159 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [6], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1066 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1160 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [7], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1067 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1161 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [8], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1068 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1162 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [9], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1069 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1163 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [10], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1070 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1164 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [11], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1071 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1165 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [12], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1072 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1166 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [13], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1073 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1167 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [14], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1074 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1168 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [15], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1075 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1169 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [16], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1076 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1170 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [17], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1077 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1171 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [18], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1078 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1172 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [19], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1079 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1173 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [20], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1080 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1174 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [21], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1081 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1175 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [22], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1082 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1176 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [23], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1083 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1177 (A=1'1, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [24], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1084 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1178 (A=1'1, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [25], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1085 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1179 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [26], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1086 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1180 (A=1'1, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [27], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1087 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1181 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [28], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1088 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1182 (A=1'1, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [29], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1089 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1183 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [30], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1090 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1153 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [0], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1060 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1184 (A=1'1, B=$techmap\F2SRAM.SPI_READER.$procmux$170_Y [31], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1091 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1218 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$164_Y [1], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1093 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1217 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$164_Y [0], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1092 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1219 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$164_Y [2], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1094 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1229 (A=$auto$alumacc.cc:474:replace_alu$325.lcu.p [0], B=1'0, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1095 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1230 (A=$techmap$auto$alumacc.cc:474:replace_alu$325.$xor$/usr/local/bin/../share/yosys/techmap.v:263$1293_Y [1], B=1'0, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1096 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1234 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$70_Y [1], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1098 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1235 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$70_Y [2], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1099 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1236 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$70_Y [3], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1100 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1237 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$70_Y [4], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1101 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1238 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$70_Y [5], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1102 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1239 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$70_Y [6], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1103 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1240 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$70_Y [7], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1104 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1241 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$70_Y [8], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1105 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1242 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$70_Y [9], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1106 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1243 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$70_Y [10], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1107 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1244 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$70_Y [11], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1108 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1245 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$70_Y [12], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1109 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1246 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$70_Y [13], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1110 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1247 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$70_Y [14], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1111 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1248 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$70_Y [15], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1112 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1249 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$70_Y [16], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1113 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1233 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$70_Y [0], B=1'0, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1097 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$770 (A=1'0, B=$techmap\F2SRAM.$procmux$211_Y, S=\F2SRAM.busy) into $auto$simplemap.cc:420:simplemap_dff$547 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$999 (A=$techmap\dds_core.$logic_and$dds.v:23$93_Y, B=1'0, S=\dds_core.iscos) into $auto$simplemap.cc:420:simplemap_dff$801 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1000 (A=\dds_core.iscos, B=1'0, S=\dds_core.islast) into $auto$simplemap.cc:420:simplemap_dff$861 (SB_DFF).

7.39. Executing ICE40_OPT pass (performing simple optimizations).

7.39.1. Running ICE40 specific optimizations.

7.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~81 debug messages>

7.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~720 debug messages>
Removed a total of 240 cells.

7.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

7.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 61 unused cells and 1373 unused wires.
<suppressed ~62 debug messages>

7.39.6. Rerunning OPT passes. (Removed registers in this run.)

7.39.7. Running ICE40 specific optimizations.

7.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

7.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

7.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

7.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

7.39.12. Rerunning OPT passes. (Removed registers in this run.)

7.39.13. Running ICE40 specific optimizations.

7.39.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

7.39.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

7.39.16. Executing OPT_RMDFF pass (remove dff with constant values).

7.39.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

7.39.18. Finished OPT passes. (There is nothing left to do.)

7.40. Executing TECHMAP pass (map to technology primitives).

7.40.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

7.40.2. Continuing TECHMAP pass.
No more expansions possible.

7.41. Executing ABC pass (technology mapping using ABC).

7.41.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 436 gates and 681 wires to a netlist network with 243 inputs and 159 outputs.

7.41.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     161.
ABC: Participating nodes from both networks       =     341.
ABC: Participating nodes from the first network   =     162. (  73.64 % of nodes)
ABC: Participating nodes from the second network  =     179. (  81.36 % of nodes)
ABC: Node pairs (any polarity)                    =     162. (  73.64 % of names can be moved)
ABC: Node pairs (same polarity)                   =     161. (  73.18 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

7.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      219
ABC RESULTS:        internal signals:      279
ABC RESULTS:           input signals:      243
ABC RESULTS:          output signals:      159
Removing temp directory.
Removed 0 unused cells and 349 unused wires.

7.42. Executing ICE40_UNLUT pass (convert SB_LUT4 to $lut).
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[16].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[17].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[18].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[19].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[20].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[21].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[22].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[23].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[24].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[25].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[26].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$307.slice[9].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$310.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$310.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$310.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$310.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$310.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$310.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$310.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$310.slice[16].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$310.slice[17].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$310.slice[1].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$310.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$310.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$310.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$310.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$310.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$310.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$310.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$310.slice[9].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$313.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$313.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$313.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$313.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$313.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$313.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$313.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$313.slice[16].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$313.slice[1].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$313.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$313.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$313.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$313.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$313.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$313.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$313.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$313.slice[9].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$316.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$316.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$316.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$316.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$316.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$316.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$316.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$316.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$316.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$316.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$316.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$316.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$316.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$316.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$316.slice[9].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$319.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$319.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$319.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$319.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$319.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$319.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$319.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$319.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$319.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$319.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$319.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$319.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$319.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$319.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$319.slice[9].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$322.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$322.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$328.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$328.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$328.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$328.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$328.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$328.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$328.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$328.slice[16].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$328.slice[17].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$328.slice[1].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$328.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$328.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$328.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$328.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$328.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$328.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$328.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$328.slice[9].adder to $lut.

7.42.1. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      329
  1-LUT               14
  2-LUT               36
  3-LUT              206
  4-LUT               73
  with \SB_CARRY     100

Eliminating LUTs.
Number of LUTs:      328
  1-LUT               13
  2-LUT               36
  3-LUT              206
  4-LUT               73
  with \SB_CARRY     100

Combining LUTs.
Number of LUTs:      322
  1-LUT               10
  2-LUT               32
  3-LUT              209
  4-LUT               71
  with \SB_CARRY     100

Eliminated 1 LUTs.
Combined 6 LUTs.
<suppressed ~1381 debug messages>

7.42.2. Executing TECHMAP pass (map to technology primitives).

7.42.2.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

7.42.2.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000011101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111011110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011000000110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110011000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110011011111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011001100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001101000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001111101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001101011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111000 for cells of type $lut.
No more expansions possible.
<suppressed ~784 debug messages>
Removed 0 unused cells and 650 unused wires.

7.42.3. Executing HIERARCHY pass (managing design hierarchy).

7.42.3.1. Analyzing design hierarchy..
Top module:  \top

7.42.3.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

7.42.4. Printing statistics.

=== top ===

   Number of wires:                318
   Number of wire bits:           1058
   Number of public wires:          96
   Number of public wire bits:     642
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                678
     SB_CARRY                      104
     SB_DFF                         97
     SB_DFFE                        85
     SB_DFFESR                      10
     SB_DFFESS                      16
     SB_DFFSR                       30
     SB_DFFSS                        5
     SB_IO                           4
     SB_LUT4                       322
     SB_PLL40_CORE                   1
     SB_SPRAM256KA                   4

7.42.5. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

7.42.6. Executing JSON backend.

Warnings: 5 unique messages, 5 total
End of script. Logfile hash: 74ec35d8bc
CPU: user 1.98s system 0.06s, MEM: 74.53 MB total, 42.46 MB resident
Yosys 0.8+612 (git sha1 c6d8692c, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 18% 20x opt_clean (0 sec), 15% 19x opt_expr (0 sec), ...
